Programing memo
===============
:Author Initials:
:toc:
:icons:
:numbered:
:website: http://asciidoc.org/

== 依存関係逆転の法則

----
上位のモジュールは下位のモジュールに依存してはならない。どちらのモジュールも「抽象」に依存すべきである。
----

----
「抽象」は実装の詳細に依存してはならない。実装の詳細が「抽象」に依存すべきである。
----

上位層がインタフェースを定義し、それを介して下位層にアクセスする。
下位層は上位層のインタフェースに依存する。

ここでいう下位層は、実装の詳細のこと。

=== 何が逆転?

旧来のライブラリを使用した実装では、ライブラリとヘッダファイルが定義されており、
ライブラリを使用する側は、ヘッダファイルに定義されたインタフェースを使って実装を行う。
これは、ライブラリを使用する側を上位層、ライブラリ側を下位層とすると、
上位層が下位層に依存している、ということである。
依存関係逆転の法則においては、下位層が [blue]*抽象化された上位層のインタフェースを使って* 実装するため、
下位層が上位層に依存している、という点において、逆転している。

[IMPORTANT]
前述の説明を補足すると、下位層は [blue]*上位層に定義された抽象化されたインタフェース* に依存している、ということに注意。
決して *詳細には依存しない。*

=== 依存関係の注入

実際には、インタフェースを介してアクセスするにせよ、
どこかで必ずインスタンスを設定しないといけないが、
それをインタフェースを使用するクラスが設定するのではなく
(インスタンスを書いた時点でそれに対する依存が発生してしまう)、外部から注入する形で実装をする。

== Level1-2

Level1-2

----
brew install ruby
----

== Level1-3

Level1-3

image::./images/scilab_plot_exsample_original.png[image]


== CheatSheet

http://powerman.name/doc/asciidoc[cheatsheet]


